@page "/boarding"

@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Encodings
@using BlazorBCPCLient.Data


<h1>Boarding</h1>

<p>New boarding to BCPConfig</p>

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Bank ID: </label>
        <InputText Id="Bank ID" Class="form-control" @bind-Value="@Model.bankId"></InputText>
        <ValidationMessage For="@(() => Model.bankId)" />
    </div>
    <div class="form-group">
        <label for="body">Bank Name: </label>
        <InputText Id="Bank Name " Class="form-control" @bind-Value="@Model.bankName"></InputText>
        <ValidationMessage For="@(() => Model.bankName)" />
    </div>
    <div class="form-group">
        <label for="body">Bank Description: </label>
        <InputTextArea Id="Bank Description" Class="form-control" @bind-Value="@Model.bankDescription"></InputTextArea>
        <ValidationMessage For="@(() => Model.bankDescription)" />
    </div>
    <button type="submit">SUBMIT</button>

    <button class="btn btn-primary" @onclick="GetOrganization">GET ORGANIZATION</button>

</EditForm>

@code
{
    private string StatusMessage;
    private string StatusClass;

    public BoardingData Model = new BoardingData();


    protected async Task HandleValidSubmit()
    {
        // other way to post 
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri("http://localhost:62150/v1/organization/NewBuyer"),
            Content =
                new StringContent(@"{""data"":""12234"",""tokenScheme"":""1""}")
        };

        requestMessage.Content.Headers.ContentType =
            new System.Net.Http.Headers.MediaTypeHeaderValue(
                "application/json");

        var response = await Http.SendAsync(requestMessage);
        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();

        //////requestMessage.Content.Headers.TryAddWithoutValidation(
        //////    "X-Correlation-ID", "82e93f47-c6e4-468f-9c27-ad2939473636");

        //////requestMessage.Properties[WebAssemblyHttpMessageHandler.FetchArgs] = new
        //////{
        //////    credentials = FetchCredentialsOption.Include
        //////};
            
        StatusClass = "alert-success";
        StatusMessage = responseBody ;
          
    }


    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = DateTime.Now + " Handle invalid submit";
    }

    protected async Task GetOrganization()
    {
        var result = await Http.GetStringAsync("http://localhost:62150/v1/organization?organizationId=1&sourceSystemCode=2");

        StatusClass = "alert-success";
        StatusMessage = result;
    }

}